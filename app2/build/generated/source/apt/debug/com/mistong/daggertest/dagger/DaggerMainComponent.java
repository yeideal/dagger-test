// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.mistong.daggertest.dagger;

import android.app.Activity;
import android.app.Fragment;
import com.mistong.daggertest.App;
import com.mistong.daggertest.App_MembersInjector;
import com.mistong.daggertest.HelloA;
import com.mistong.daggertest.HelloB;
import com.mistong.daggertest.HelloSingle;
import com.mistong.daggertest.MainActivity;
import com.mistong.daggertest.MainActivity2;
import com.mistong.daggertest.MainActivity2_MembersInjector;
import com.mistong.daggertest.MainActivity_MembersInjector;
import com.mistong.daggertest.base.BaseActivity_MembersInjector;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import javax.inject.Provider;

public final class DaggerMainComponent implements MainComponent {
  private Provider<ActivityAllModule_BuildMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<ActivityAllModule_BuildMainActivity2.MainActivity2Subcomponent.Builder>
      mainActivity2SubcomponentBuilderProvider;

  private Provider<HelloSingle> provideHelloSingleProvider;

  private DaggerMainComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static MainComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivityAllModule_BuildMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityAllModule_BuildMainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.mainActivity2SubcomponentBuilderProvider =
        new Provider<ActivityAllModule_BuildMainActivity2.MainActivity2Subcomponent.Builder>() {
          @Override
          public ActivityAllModule_BuildMainActivity2.MainActivity2Subcomponent.Builder get() {
            return new MainActivity2SubcomponentBuilder();
          }
        };
    this.provideHelloSingleProvider =
        DoubleCheck.provider(MainModule_ProvideHelloSingleFactory.create(builder.mainModule));
  }

  @Override
  public void inject(App app) {
    injectApp(app);
  }

  private App injectApp(App instance) {
    App_MembersInjector.injectDispatchingActivityInjector(
        instance,
        DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
            MapBuilder
                .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
                    newMapBuilder(2)
                .put(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)
                .put(MainActivity2.class, (Provider) mainActivity2SubcomponentBuilderProvider)
                .build()));
    return instance;
  }

  public static final class Builder {
    private MainModule mainModule;

    private Builder() {}

    public MainComponent build() {
      if (mainModule == null) {
        this.mainModule = new MainModule();
      }
      return new DaggerMainComponent(this);
    }

    public Builder mainModule(MainModule mainModule) {
      this.mainModule = Preconditions.checkNotNull(mainModule);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityAllModule_BuildMainActivity.MainActivitySubcomponent.Builder {
    private ActivityAllModule.MainActivityModule mainActivityModule;

    private ActivityModule activityModule;

    private MainActivity seedInstance;

    @Override
    public ActivityAllModule_BuildMainActivity.MainActivitySubcomponent build() {
      if (mainActivityModule == null) {
        this.mainActivityModule = new ActivityAllModule.MainActivityModule();
      }
      if (activityModule == null) {
        this.activityModule = new ActivityModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityAllModule_BuildMainActivity.MainActivitySubcomponent {
    private Provider<MainActivity> seedInstanceProvider;

    private Provider<Activity> provideActivityProvider;

    private Provider<HelloB> provideActivityProvider2;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
      this.provideActivityProvider =
          DoubleCheck.provider(
              ActivityAllModule_MainActivityModule_ProvideActivityFactory.create(
                  builder.mainActivityModule, seedInstanceProvider));
      this.provideActivityProvider2 =
          DoubleCheck.provider(
              ActivityModule_ProvideActivityFactory.create(
                  builder.activityModule, provideActivityProvider));
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      BaseActivity_MembersInjector.injectDispatchingFragmentInjector(
          instance,
          DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
              Collections
                  .<Class<? extends Fragment>,
                      Provider<AndroidInjector.Factory<? extends Fragment>>>
                      emptyMap()));
      MainActivity_MembersInjector.injectHelloSingle(
          instance, DaggerMainComponent.this.provideHelloSingleProvider.get());
      MainActivity_MembersInjector.injectHelloA(
          instance, new HelloA(provideActivityProvider.get()));
      MainActivity_MembersInjector.injectHelloB(instance, provideActivityProvider2.get());
      return instance;
    }
  }

  private final class MainActivity2SubcomponentBuilder
      extends ActivityAllModule_BuildMainActivity2.MainActivity2Subcomponent.Builder {
    private ActivityAllModule.MainActivityModule2 mainActivityModule2;

    private ActivityModule activityModule;

    private MainActivity2 seedInstance;

    @Override
    public ActivityAllModule_BuildMainActivity2.MainActivity2Subcomponent build() {
      if (mainActivityModule2 == null) {
        this.mainActivityModule2 = new ActivityAllModule.MainActivityModule2();
      }
      if (activityModule == null) {
        this.activityModule = new ActivityModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity2.class.getCanonicalName() + " must be set");
      }
      return new MainActivity2SubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity2 arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivity2SubcomponentImpl
      implements ActivityAllModule_BuildMainActivity2.MainActivity2Subcomponent {
    private Provider<MainActivity2> seedInstanceProvider;

    private Provider<Activity> provideActivityProvider;

    private Provider<HelloB> provideActivityProvider2;

    private MainActivity2SubcomponentImpl(MainActivity2SubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity2SubcomponentBuilder builder) {
      this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
      this.provideActivityProvider =
          DoubleCheck.provider(
              ActivityAllModule_MainActivityModule2_ProvideActivityFactory.create(
                  builder.mainActivityModule2, seedInstanceProvider));
      this.provideActivityProvider2 =
          DoubleCheck.provider(
              ActivityModule_ProvideActivityFactory.create(
                  builder.activityModule, provideActivityProvider));
    }

    @Override
    public void inject(MainActivity2 arg0) {
      injectMainActivity2(arg0);
    }

    private MainActivity2 injectMainActivity2(MainActivity2 instance) {
      BaseActivity_MembersInjector.injectDispatchingFragmentInjector(
          instance,
          DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
              Collections
                  .<Class<? extends Fragment>,
                      Provider<AndroidInjector.Factory<? extends Fragment>>>
                      emptyMap()));
      MainActivity2_MembersInjector.injectHelloSingle(
          instance, DaggerMainComponent.this.provideHelloSingleProvider.get());
      MainActivity2_MembersInjector.injectHelloA(
          instance, new HelloA(provideActivityProvider.get()));
      MainActivity2_MembersInjector.injectHelloB(instance, provideActivityProvider2.get());
      return instance;
    }
  }
}
